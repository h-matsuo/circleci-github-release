version: 2.1

description: |
  Create / delete GitHub's Releases.
  Issues & PRs: https://github.com/h-matsuo/circleci-orb-github-release

executors:
  default:
    parameters:
      tag:
        description: Pick a specific circleci/golang image variant.
        type: string
        default: "latest"
    docker:
      - image: circleci/golang:<< parameters.tag >>

common-parameters: &common-parameters
  github-token-variable:
    description: Environment variable containing your GitHub personal access token.
    type: string
    default: $GITHUB_TOKEN
  user:
    description: GitHub repository user or organization.
    type: string
    default: $CIRCLE_PROJECT_USERNAME
  repository:
    description: GitHub repository.
    type: string
    default: $CIRCLE_PROJECT_REPONAME

commands:

  delete:
    description: Delete an existing release.
    parameters:
      <<: *common-parameters
      tag:
        description: Git tag for the release.
        type: string
    steps:
      - internal__install-deps
      - run:
          name: "[github-release/delete] Delete the specified release"
          command: |
            github-release delete \
              --security-token << parameters.github-token-variable >> \
              --user << parameters.user >> \
              --repo << parameters.repository >> \
              --tag << parameters.tag >>

  create:
    description: Create a new release.
    parameters:
      <<: *common-parameters
      tag:
        description: Git tag using as the version number of the release.
        type: string
      target:
        description: Git commitish (commit SHA or branch name) containing the project you want to release.
        type: string
        default: $CIRCLE_SHA1
      title:
        description: Name of the release.
        type: string
      description:
        description: Description of the release.
        type: string
      file-path:
        description: |
          File path to be uploaded.
          If directory, all files in the directory will be uploaded.
          If empty, just create a new release without uploading any files.
        type: string
        default: ""
      draft:
        description: Set true if the release is a draft.
        type: boolean
        default: false
      pre-release:
        description: Set true if the release is a pre-release.
        type: boolean
        default: false
    steps:
      - internal__install-deps
      - when:
          condition: << parameters.file-path >>
          steps:
            - run:
                name: "[github-release/create] Publish a new release with artifacts"
                command: |
                  ghr \
                    --token << parameters.github-token-variable >> \
                    --username << parameters.user >> \
                    --repository << parameters.repository >> \
                    --commitish << parameters.target >> \
                    --name "<< parameters.title >>" \
                    --body "<< parameters.description >>" \
                    <<# parameters.draft >> --draft <</ parameters.draft >> \
                    <<# parameters.pre-release >> --prerelease <</ parameters.pre-release >> \
                      << parameters.tag >> << parameters.file-path >>
      - unless:
          condition: << parameters.file-path >>
          steps:
            - run:
                name: "[github-release/create] Publish a new release without artifacts"
                command: |
                  github-release release \
                    --security-token << parameters.github-token-variable >> \
                    --user << parameters.user >> \
                    --repo << parameters.repository >> \
                    --tag << parameters.tag >> \
                    --name "<< parameters.title >>" \
                    --description "<< parameters.description >>" \
                    --target << parameters.target >> \
                    <<# parameters.draft >> --draft <</ parameters.draft >> \
                    <<# parameters.pre-release >> --pre-release <</ parameters.pre-release >>


  # Get tools to manage GitHub's releases
  internal__install-deps:
    description: "(For INTERNAL use only)"
    steps:
      - run:
          name: "[github-release] Get tools to manage releases"
          command: go get github.com/aktau/github-release github.com/tcnksm/ghr


examples:

  delete:
    description: |
      Delete an existing release.
      Make sure you set $GITHUB_TOKEN to your GitHub personal access token in advance.
    usage:
      version: 2.1
      orbs:
        github-release: h-matsuo/github-release@0.1.1
      jobs:
        build:
          description: Delete the release tagged `vX.Y.Z`.
          executor: github-release/default
          steps:
            - github-release/delete:
                tag: vX.Y.Z

  create:
    description: |
      Publish a new release with artifacts.
      Make sure you set $GITHUB_TOKEN to your GitHub personal access token in advance.
    usage:
      version: 2.1
      orbs:
        github-release: h-matsuo/github-release@0.1.1
      jobs:
        build:
          description: Create dummy file and publish a new release tagged `vX.Y.Z`.
          executor: github-release/default
          steps:
            - run:
                command: |
                  mkdir artifacts
                  echo dummy > ./artifacts/file
            - github-release/create:
                tag: vX.Y.Z
                title: Version vX.Y.Z
                description: This release is version vX.Y.Z .
                file-path: ./artifacts/file
